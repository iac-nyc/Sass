// =========================================
//  Mixins
// =========================================

// Slanted effect
@mixin skewed {
  position: relative;
  &::after {
    content: '';
    display: block;
    width: 100%;
    height: 50px; 
    position: absolute;
    transform: skewY(-2deg);
    @content;
  }
}

// Center containers
@mixin center($w) {
  width: $w; //90%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
}

//Rounded elements
@mixin roundy($dim,$border: null){
  width: $dim;
  height: $dim;
  border: $border;
  border-radius: 50%;

}
  
 //Create a flex container
  @mixin flexy( $disp: flex,
                $dir: null,
                $wrap: null,
                $just: null){
    display: $disp;
    flex-direction: $dir;
    flex-wrap: $wrap;
    justify-content: $just;
  
  }
  
           
  
            
//      @if $break =='xs'{
//         @media(max-width: map-get($breakpoints,'xs')){
//           @content;
//      }
//     }@else if $break =='sm'{
//          @media(min-width: $break-s){
//           @content;
//          
//          }
//          
//      }@else if $break =='med'{
//          @media(min-width: $break-m){
//           @content;
//          
//          }
//          
//      }
//      @else if $break =='lg'{
//          @media(min-width: $break-l){
//           @content;
//          
//          }
//          
//      }
//          
 // }
          
   //Media Queries
  @mixin mq($break){
            
            $value:map-get($breakpoints, $break);
            $sm:map-get($breakpoints, 'lg');
            
            @if $value == null{
            
           @error "#{$break} is not a valid breakpoint name";
             // @warn "#{$break} is not a valid breakpoint name";
            
            }
            
            
            @else if $value <$sm{
               @media(max-width: $value){
           @content;
            
           }
          }
          @else {
            @media (min-width: $value){
          
          
           }
          
          }
      }
  
  // Colors
  
  @mixin themes($map){
    
      @each $theme, $color in $map{
       &-#{$theme}{
        
          color: $color;
        }
    }  
  
  }
  
  
  
  
  
  
  
  
  
  
  
  